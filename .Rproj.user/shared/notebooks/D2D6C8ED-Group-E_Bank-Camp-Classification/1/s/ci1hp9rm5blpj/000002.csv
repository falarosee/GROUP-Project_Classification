"0","train_val<- function(train_dt, model, sampling){"
"0","  tc<-trainControl("
"0","    method = ""cv"","
"0","    number=5,"
"0","    savePredictions = TRUE,"
"0","    classProbs=TRUE,"
"0","    summaryFunction = prSummary)"
"0",""
"0","  trainIndex <- createDataPartition(train_dt$y, p = .8, list = FALSE)"
"0","  model_train <- train_dt[ trainIndex,]"
"0","  holdout  <- train_dt[-trainIndex,]"
"0","  "
"0","  if(!missing(sampling)){"
"0","    if(sampling == 'over'){"
"0","      model_train<-upSample(x = model_train[, -""y""],y = model_train$y, yname=""y"")"
"0","    }"
"0","    else if(sampling == 'under'){"
"0","      model_train<-downSample(x = model_train[, -""y""],y = model_train$y, yname=""y"")"
"0","    }"
"0","    else {"
"0","      model_train<-SMOTE(y ~ ., data  = model_train) "
"0","    }"
"0","  }"
"0","  "
"0","  ini<-now()"
"0","  model<- train(y~ ., data = model_train, method = model, metric=""AUC"", trControl=tc, preProcess=pp)"
"0","  message(""Cross Validation Scores having Yes as the positive class"")"
"0","  message(model$results)"
"0","  message(""Train + Predict time:"")"
"0","  message(now()-ini)"
"0","  "
"0","  predicted = predict(model, newdata = holdout)"
"0","  "
"0","  message(""Holdout Scores"")"
"0","  message(confusionMatrix(table(predicted, holdout$y), positive=""yes"", mode=""everything""))"
"0","  "
"0","  return(model)"
"0","}"
