summaryFunction = prSummary,
classProbs=TRUE,
search = "random"
)
ini<-now()
trainIndex <- createDataPartition(train_featured$y, p = .5, list = FALSE)
model_train <- train_featured[ trainIndex,]
holdout  <- train_featured[-trainIndex,]
model_train<-SMOTE(y ~ ., data  = model_train)
grid_rf <- train(
y ~ .,
data = model_train,
method = "ranger",
num.trees=500,
tuneGrid = grid,
trControl = tc,
metric = "Recall",
tuneLength = 5,
verbose = TRUE,
importance = "impurity",
preProcess=pp
)
grid<-expand.grid(
mtry=c(16,32,63),
splitrule=c('extratrees', 'gini'),
min.node.size=c(1,3,5)
)
tc<-trainControl(
method = "cv",
number=5,
savePredictions = TRUE,
summaryFunction = prSummary,
classProbs=TRUE,
search = "random"
)
ini<-now()
trainIndex <- createDataPartition(train_featured$y, p = .5, list = FALSE)
model_train <- train_featured[ trainIndex,]
holdout  <- train_featured[-trainIndex,]
model_train2<-SMOTE(y ~ ., data  = model_train)
grid_rf <- train(
y ~ .,
data = model_train2,
method = "ranger",
num.trees=500,
tuneGrid = grid,
trControl = tc,
metric = "Recall",
tuneLength = 5,
verbose = TRUE,
importance = "impurity",
preProcess=pp
)
grid<-expand.grid(
mtry=c(16,32,63),
splitrule=c('extratrees', 'gini'),
min.node.size=c(1,3,5)
)
tc<-trainControl(
method = "cv",
number=5,
savePredictions = TRUE,
summaryFunction = prSummary,
classProbs=TRUE,
search = "random"
)
ini<-now()
trainIndex <- createDataPartition(train_featured$y, p = .5, list = FALSE)
model_train <- train_featured[ trainIndex,]
holdout  <- train_featured[-trainIndex,]
model_train<-SMOTE(y ~ ., data  = model_train)
grid_rf <- train(
y ~ .,
data = model_train,
method = "ranger",
num.trees=500,
tuneGrid = grid,
trControl = tc,
metric = "Recall",
tuneLength = 5,
verbose = TRUE,
importance = "impurity",
preProcess=pp
)
model_train
holdout
grid<-expand.grid(
mtry=c(16,32,63),
splitrule=c('extratrees', 'gini'),
min.node.size=c(1,3,5)
)
tc<-trainControl(
method = "cv",
number=5,
savePredictions = TRUE,
summaryFunction = prSummary,
classProbs=TRUE,
search = "random"
)
ini<-now()
trainIndex <- createDataPartition(train_featured$y, p = .5, list = FALSE)
model_train <- train_featured[ trainIndex,]
holdout  <- train_featured[-trainIndex,]
model_train<-SMOTE(y ~ ., data  = model_train)
grid_rf <- train(
y ~ .,
data = train_featured,
method = "ranger",
num.trees=500,
tuneGrid = grid,
trControl = tc,
metric = "Recall",
tuneLength = 5,
verbose = TRUE,
importance = "impurity",
preProcess=pp
)
print(now()-ini)
grid_rf
grid<-expand.grid(
mtry=c(16,32,63),
splitrule=c('extratrees', 'gini'),
min.node.size=c(1,3,5)
)
tc<-trainControl(
method = "cv",
number=5,
savePredictions = TRUE,
summaryFunction = prSummary,
classProbs=TRUE,
search = "random"
)
ini<-now()
trainIndex <- createDataPartition(train_featured$y, p = .5, list = FALSE)
model_train <- train_featured[ trainIndex,]
holdout  <- train_featured[-trainIndex,]
model_train<-SMOTE(y ~ ., data  = model_train)
grid_rf <- train(
y ~ .,
data = model_train,
method = "ranger",
num.trees=500,
tuneGrid = grid,
trControl = tc,
metric = "Recall",
tuneLength = 5,
verbose = TRUE,
importance = "impurity",
preProcess=pp
)
grid<-expand.grid(
mtry=c(16,32,63),
splitrule=c('extratrees', 'gini'),
min.node.size=c(1,3,5)
)
tc<-trainControl(
method = "cv",
number=5,
savePredictions = TRUE,
summaryFunction = prSummary,
classProbs=TRUE,
search = "random"
)
ini<-now()
trainIndex <- createDataPartition(train_featured$y, p = .6, list = FALSE)
model_train <- train_featured[ trainIndex,]
holdout  <- train_featured[-trainIndex,]
model_train<-SMOTE(y ~ ., data  = model_train)
grid_rf <- train(
y ~ .,
data = model_train,
method = "ranger",
num.trees=500,
tuneGrid = grid,
trControl = tc,
metric = "Recall",
tuneLength = 5,
verbose = TRUE,
importance = "impurity",
preProcess=pp
)
print(now()-ini)
grid_rf
grid_rf$bestTune
grid_rf$finalModel
plot(grid_rf)
plot(varImp(grid_rf), top = 20)
predicted <- predict(grid_rf, newdata = holdout)
roc_curve<-roc(response=as.numeric(factor(holdout$y == "yes")), predictor=as.numeric(factor(predicted == "yes")))
plot.roc(roc_curve, main='ROC on Holdout');grid()
print(confusionMatrix(table(predicted, holdout$y), positive="yes", mode="everything"))
plot(table(predicted=predicted, real=holdout$y))
print(confusionMatrix(table(predicted, holdout$y), positive="yes", mode="everything"))
plot(table(predicted=predicted, real=holdout$y))
confusion_matrix <- as.data.frame(table(predicted, holdout$y))
ggplot(data = confusion_matrix,
mapping = aes(x = predicted,
y = Var2)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1) +
scale_fill_gradient(low = "blue",
high = "red",
trans = "log")
library(kable)
install.packages('kable')
library(kable)
install.packages('kable')
library(kable)
library('kable')
#nstall.packages('kable')
#library('kable')
kable(head(train))
#nstall.packages('kable')
#library('kable')
kable(train)
#nstall.packages('kable')
#library('kable')
knitr::kable(train)
#nstall.packages('kable')
#library('kable')
knitr::kable(head(train))
knitr::kable(head(train))
knitr::kable(bootstrap_options =c("striped", "hover", "condensed"))
knitr::kable(head(train)) %>%
knitr::kable(bootstrap_options =c("striped", "hover", "condensed"))
knitr::kable(head(train)) %>%
kable(bootstrap_options =c("striped", "hover", "condensed"))
knitr::kable(head(train)) %>%
knitr::kable(bootstrap_options =c("striped", "hover", "condensed"))
knitr::kable(head(train))
head(train)
train_val<- function(train_dt, model, sampling){
tc<-trainControl(
method = "cv",
number=5,
savePredictions = TRUE,
classProbs=TRUE,
summaryFunction = prSummary)
trainIndex <- createDataPartition(train_dt$y, p = .8, list = FALSE)
model_train <- train_dt[ trainIndex,]
holdout  <- train_dt[-trainIndex,]
if(!missing(sampling)){
if(sampling == 'over'){
model_train<-upSample(x = model_train[, -"y"],y = model_train$y, yname="y")
}
else if(sampling == 'under'){
model_train<-downSample(x = model_train[, -"y"],y = model_train$y, yname="y")
}
else {
model_train<-SMOTE(y ~ ., data  = model_train)
}
}
ini<-now()
model<- train(y~ ., data = model_train, method = model, metric="AUC", trControl=tc, preProcess=pp)
message("Cross Validation Scores having Yes as the positive class")
message(model$results)
message("Train + Predict time:")
message(now()-ini)
predicted = predict(model, newdata = holdout)
print("Holdout Scores")
print(confusionMatrix(table(predicted, holdout$y), positive="yes", mode="everything"))
return(model)
}
lm <- train_val(final_train, "glm")
library('kableExtra')
library('kableextra')
library(kableextra)
library(kableExtra)
install.packages('kableExtra')
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE, comment = NA, warning = FALSE)
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
knitr::opts_chunk$set(echo = TRUE, comment = NA, warning = FALSE)
knitr::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
knitr::opts_chunk$set(echo = TRUE, comment = NA, warning = FALSE)
knitr::kable.kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
knitr::opts_chunk$set(echo = TRUE, comment = NA, warning = FALSE)
knitr::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
knitr::opts_chunk$set(echo = TRUE, comment = NA, warning = FALSE)
knitr::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
knitr::opts_chunk$set(echo = TRUE, comment = NA, warning = FALSE)
start_time <- Sys.time()
print(paste0('---START--- Starting at ',start_time))
packages_list <- c(
'caret',
'corrplot',
'data.table',
'DMwR', #SMOTE
'dplyr',
'GGally', #Corrplot
'ggplot2',
'kableExtra',
'lubridate',
'MLmetrics',
'pROC') #ROC Graph
for (i in packages_list){
if(!i%in%installed.packages()){
install.packages(i, dependencies = TRUE)
library(i, character.only = TRUE)
print(paste0(i, ' has been installed'))
} else {
print(paste0(i, ' is already installed'))
library(i, character.only = TRUE)
}
}
print(paste0('[', round(difftime(Sys.time(),start_time, units = 'secs'),1), 's]: ',
'All necessary packages installed and loaded'))
knitr::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
knitr::opts_chunk$set(echo = TRUE, comment = NA, warning = FALSE)
start_time <- Sys.time()
print(paste0('---START--- Starting at ',start_time))
packages_list <- c(
'caret',
'corrplot',
'data.table',
'DMwR', #SMOTE
'dplyr',
'GGally', #Corrplot
'ggplot2',
'kableExtra',
'lubridate',
'MLmetrics',
'pROC') #ROC Graph
for (i in packages_list){
if(!i%in%installed.packages()){
install.packages(i, dependencies = TRUE)
library(i, character.only = TRUE)
print(paste0(i, ' has been installed'))
} else {
print(paste0(i, ' is already installed'))
library(i, character.only = TRUE)
}
}
print(paste0('[', round(difftime(Sys.time(),start_time, units = 'secs'),1), 's]: ',
'All necessary packages installed and loaded'))
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
knitr::opts_chunk$set(echo = TRUE, comment = NA, warning = FALSE)
start_time <- Sys.time()
print(paste0('---START--- Starting at ',start_time))
packages_list <- c(
'caret',
'corrplot',
'data.table',
'DMwR', #SMOTE
'dplyr',
'GGally', #Corrplot
'ggplot2',
'kableExtra',
'lubridate',
'MLmetrics',
'pROC') #ROC Graph
for (i in packages_list){
if(!i%in%installed.packages()){
install.packages(i, dependencies = TRUE)
library(i, character.only = TRUE)
print(paste0(i, ' has been installed'))
} else {
print(paste0(i, ' is already installed'))
library(i, character.only = TRUE)
}
}
print(paste0('[', round(difftime(Sys.time(),start_time, units = 'secs'),1), 's]: ',
'All necessary packages installed and loaded'))
kable <- function(data) {
knitr::kable(data, booktabs = TRUE) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
}
train = fread("BankCamp_train.csv", stringsAsFactors = T)
train<-train[1:100]
test = fread("BankCamp_test.csv", stringsAsFactors = T)
train$y <- factor(train$y, levels = c("yes", "no"))
test$y <- factor(test$y, levels = c("yes", "no"))
kable(head(train))
knitr::opts_chunk$set(echo = TRUE, comment = NA, warning = FALSE)
start_time <- Sys.time()
print(paste0('---START--- Starting at ',start_time))
packages_list <- c(
'caret',
'corrplot',
'data.table',
'DMwR', #SMOTE
'dplyr',
'GGally', #Corrplot
'ggplot2',
'lubridate',
'MLmetrics',
'pROC') #ROC Graph
for (i in packages_list){
if(!i%in%installed.packages()){
install.packages(i, dependencies = TRUE)
library(i, character.only = TRUE)
print(paste0(i, ' has been installed'))
} else {
print(paste0(i, ' is already installed'))
library(i, character.only = TRUE)
}
}
print(paste0('[', round(difftime(Sys.time(),start_time, units = 'secs'),1), 's]: ',
'All necessary packages installed and loaded'))
train_val<- function(train_dt, model, sampling){
tc<-trainControl(
method = "cv",
number=5,
savePredictions = TRUE,
classProbs=TRUE,
summaryFunction = prSummary)
trainIndex <- createDataPartition(train_dt$y, p = .8, list = FALSE)
model_train <- train_dt[ trainIndex,]
holdout  <- train_dt[-trainIndex,]
if(!missing(sampling)){
if(sampling == 'over'){
model_train<-upSample(x = model_train[, -"y"],y = model_train$y, yname="y")
}
else if(sampling == 'under'){
model_train<-downSample(x = model_train[, -"y"],y = model_train$y, yname="y")
}
else {
model_train<-SMOTE(y ~ ., data  = model_train)
}
}
ini<-now()
model<- train(y~ ., data = model_train, method = model, metric="Recall", trControl=tc, preProcess=pp)
message("Cross Validation Scores having Yes as the positive class")
message(model$results)
message("Train + Predict time:")
message(now()-ini)
predicted = predict(model, newdata = holdout)
print("Holdout Scores")
print(confusionMatrix(table(predicted, holdout$y), positive="yes", mode="everything"))
return(model)
}
lm <- train_val(final_train, "glm")
knitr::opts_chunk$set(echo = TRUE, comment = NA, warning = FALSE)
start_time <- Sys.time()
print(paste0('---START--- Starting at ',start_time))
packages_list <- c(
'caret',
'corrplot',
'data.table',
'DMwR', #SMOTE
'dplyr',
'GGally', #Corrplot
'ggplot2',
'glmnet', #Lasso regularization
'lubridate',
'MLmetrics',
'plotly', #Interactive correlation
'pROC') #ROC Graph
for (i in packages_list){
if(!i%in%installed.packages()){
install.packages(i, dependencies = TRUE)
library(i, character.only = TRUE)
print(paste0(i, ' has been installed'))
} else {
print(paste0(i, ' is already installed'))
library(i, character.only = TRUE)
}
}
print(paste0('[', round(difftime(Sys.time(),start_time, units = 'secs'),1), 's]: ',
'All necessary packages installed and loaded'))
train = fread("BankCamp_train.csv", stringsAsFactors = T)
train<-train[1:100]
test = fread("BankCamp_test.csv", stringsAsFactors = T)
train$y <- factor(train$y, levels = c("yes", "no"))
test$y <- factor(test$y, levels = c("yes", "no"))
train[ , which(sapply(train, is.integer)):=lapply(.SD,as.numeric), .SDcols = sapply(train, is.integer)]
test[ , which(sapply(test, is.integer)):=lapply(.SD,as.numeric), .SDcols = sapply(test, is.integer)]
str(train)
sort(summary(train$y), dec=T)/nrow(train)
p1<-ggplot(train, aes(x=y))+geom_bar(stat='count',fill="dodgerblue4", colour="dodgerblue4", label = TRUE)+
theme(axis.text.x = element_text(angle=0))+ labs(title = "Distribution of Clients Subscribed")+
xlab("y")+ ylab("Count")
train[, job:=factor(job, levels=names(sort(summary(train$job), dec=T)))]
levels(train$job)
p1
numerical <- select_if(train,is.numeric)
corr_plot <- ggcorr(numerical,  label_round=2, label = TRUE)
corr_plot
plot_ly(x = colnames(train),
y=colnames(train),
z = corresult ,colors = colorRamp(c("dodgerblue4", "brown2")),
type = "heatmap") %>% layout(title="Interactive Correlation Matrix")
plot_ly(x = colnames(train),
y=colnames(train),
z = corr(train) ,colors = colorRamp(c("dodgerblue4", "brown2")),
type = "heatmap") %>% layout(title="Interactive Correlation Matrix")
plot_ly(x = colnames(train),
y=colnames(train),
z = cor(train) ,colors = colorRamp(c("dodgerblue4", "brown2")),
type = "heatmap") %>% layout(title="Interactive Correlation Matrix")
plot_ly(x = colnames(train),
y=colnames(train),
z = corr(train) ,colors = colorRamp(c("dodgerblue4", "brown2")),
type = "heatmap") %>% layout(title="Interactive Correlation Matrix")
plot_ly(x = colnames(train),
y=colnames(train),
z = corr_plot ,colors = colorRamp(c("dodgerblue4", "brown2")),
type = "heatmap") %>% layout(title="Interactive Correlation Matrix")
plot_ly(x = colnames(train),
y=colnames(train),
z = corr(train) ,colors = colorRamp(c("dodgerblue4", "brown2")),
type = "heatmap") %>% layout(title="Interactive Correlation Matrix")
plot_ly(x = colnames(train),
y=colnames(train),
z = cor(train), colors = colorRamp(c("dodgerblue4", "brown2")),
type = "heatmap") %>% layout(title="Interactive Correlation Matrix")
plot_ly(x = colnames(train),
y=colnames(train),
z = cor(numerical), colors = colorRamp(c("dodgerblue4", "brown2")),
type = "heatmap") %>% layout(title="Interactive Correlation Matrix")
train = fread("BankCamp_train.csv", stringsAsFactors = T)
nrow(train)
